{"version":3,"sources":["../src/ipfilter.js"],"names":["_","require","iputil","rangeCheck","IpDeniedError","module","exports","ipfilter","ips","opts","getIps","isFunction","logger","message","console","log","settings","defaults","mode","logF","allowedHeaders","allowPrivateIPs","excluding","detectIp","getClientIp","req","ipAddress","headerIp","reduce","acc","header","testIp","headers","splitHeaderIp","split","connection","remoteAddress","isV6Format","indexOf","isV4Format","matchClientIp","ip","toLowerCase","result","invokeMap","some","every","constraint","validRange","testCidrBlock","testExplicitIp","testRange","inRange","filteredSet","filter","length","startIp","toLong","endIp","longIp","error","next","err","res","results","exclude","regex","RegExp","test","url","logLevel","_ips"],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\r\n * Express - IP Filter\r\n * Copyright(c) 2014 Bradley and Montgomery Inc.\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\nvar _ = require('lodash');\r\nvar iputil = require('ip');\r\nvar rangeCheck = require('range_check');\r\nvar IpDeniedError = require('./deniedError');\r\n\r\n/**\r\n * express-ipfilter:\r\n *\r\n * IP Filtering middleware;\r\n *\r\n * Examples:\r\n *\r\n *      var ipfilter = require('ipfilter'),\r\n *          ips = ['127.0.0.1'];\r\n *          getIps = function() { return ['127.0.0.1']; };\r\n *\r\n *      app.use(ipfilter(ips));\r\n *      app.use(ipfilter(getIps));\r\n *\r\n * Options:\r\n *\r\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\r\n *  - `logF` Function to use for logging.\r\n *  - `log` console log actions. Defaults to true.\r\n *  - `allowPrivateIPs` whether to allow private IPs.\r\n *  - `allowedHeaders` Array of headers to check for forwarded IPs.\r\n *  - 'excluding' routes that should be excluded from ip filtering\r\n *\r\n * @param [ips] {Array} IP addresses or {Function} that returns the array of IP addresses\r\n * @param [opts] {Object} options\r\n * @api public\r\n */\r\nmodule.exports = function ipfilter(ips, opts) {\r\n  ips = ips || false;\r\n\r\n  var getIps = _.isFunction(ips) ? ips : function(){ return ips; };\r\n  var logger = function(message){ console.log(message);};\r\n  var settings = _.defaults( opts || {}, {\r\n    mode: 'deny',\r\n    log: true,\r\n    logF: logger,\r\n    allowedHeaders: [],\r\n    allowPrivateIPs: false,\r\n    excluding: [],\r\n    detectIp: getClientIp\r\n  });\r\n\r\n  function getClientIp(req) {\r\n    var ipAddress;\r\n\r\n    var headerIp = _.reduce(settings.allowedHeaders, function(acc, header){\r\n      var testIp = req.headers[header];\r\n      if(testIp != ''){\r\n        acc = testIp;\r\n      }\r\n\r\n      return acc;\r\n    },'');\r\n\r\n    if(headerIp) {\r\n      var splitHeaderIp = headerIp.split(',');\r\n      ipAddress = splitHeaderIp[0];\r\n    }\r\n\r\n    if(!ipAddress) {\r\n      ipAddress = req.connection.remoteAddress;\r\n    }\r\n\r\n    if(!ipAddress){\r\n      return '';\r\n    }\r\n\r\n    if(iputil.isV6Format(ipAddress) && ~ipAddress.indexOf('::ffff')){\r\n      ipAddress = ipAddress.split('::ffff:')[1];\r\n    }\r\n\r\n    if(iputil.isV4Format(ipAddress) && ~ipAddress.indexOf(':')){\r\n      ipAddress = ipAddress.split(':')[0];\r\n    }\r\n\r\n    return ipAddress;\r\n  }\r\n\r\n  var matchClientIp = function(ip){\r\n    var mode = settings.mode.toLowerCase();\r\n\r\n    var result = _.invokeMap(getIps(),testIp,ip,mode);\r\n\r\n    if(mode === 'allow'){\r\n      return _.some(result);\r\n    }else{\r\n      return _.every(result);\r\n    }\r\n  };\r\n\r\n  var testIp = function(ip,mode){\r\n    var constraint = this;\r\n\r\n    // Check if it is an array or a string\r\n    if(typeof constraint === 'string'){\r\n      if(rangeCheck.validRange(constraint)){\r\n        return testCidrBlock(ip,constraint,mode);\r\n      }else{\r\n        return testExplicitIp(ip,constraint,mode);\r\n      }\r\n    }\r\n\r\n    if(typeof constraint === 'object'){\r\n      return testRange(ip,constraint,mode);\r\n    }\r\n  };\r\n\r\n  var testExplicitIp = function(ip,constraint,mode){\r\n    if(ip === constraint){\r\n      return mode === 'allow';\r\n    }else{\r\n      return mode === 'deny';\r\n    }\r\n  };\r\n\r\n  var testCidrBlock = function(ip,constraint,mode){\r\n    if(rangeCheck.inRange(ip, constraint)){\r\n      return mode === 'allow';\r\n    }else{\r\n      return mode === 'deny';\r\n    }\r\n  };\r\n\r\n  var testRange = function(ip,constraint,mode){\r\n    var filteredSet = _.filter(getIps(),function(constraint){\r\n      if(constraint.length > 1){\r\n        var startIp = iputil.toLong(constraint[0]);\r\n        var endIp = iputil.toLong(constraint[1]);\r\n        var longIp = iputil.toLong(ip);\r\n        return  longIp >= startIp && longIp <= endIp;\r\n      }else{\r\n        return ip === constraint[0];\r\n      }\r\n    });\r\n\r\n    if(filteredSet.length > 0){\r\n      return mode === 'allow';\r\n    }else{\r\n      return mode === 'deny';\r\n    }\r\n  };\r\n\r\n  var error = function(ip, next){\r\n    var err = new IpDeniedError('Access denied to IP address: ' + ip);\r\n    return next(err);\r\n  };\r\n\r\n  return function(req, res, next) {\r\n    if(settings.excluding.length > 0){\r\n      var results = _.filter(settings.excluding,function(exclude){\r\n        var regex = new RegExp(exclude);\r\n        return regex.test(req.url);\r\n      });\r\n\r\n      if(results.length > 0){\r\n        if(settings.log && settings.logLevel !== 'deny'){\r\n          settings.logF('Access granted for excluded path: ' + results[0]);\r\n        }\r\n        return next();\r\n      }\r\n    }\r\n\r\n    var _ips = getIps();\r\n    if(!_ips || !_ips.length) {\r\n      if(settings.mode == 'allow'){\r\n        // ip list is empty, thus no one allowed\r\n        return error('0.0.0.0/0', next);\r\n      } else {\r\n        // there are no blocked ips, skip\r\n        return next();\r\n      }\r\n    }\r\n\r\n    var ip = settings.detectIp(req);\r\n\r\n    if(matchClientIp(ip,req)) {\r\n      // Grant access\r\n      if(settings.log && settings.logLevel !== 'deny') {\r\n        settings.logF('Access granted to IP address: ' + ip);\r\n      }\r\n\r\n      return next();\r\n    }\r\n\r\n    // Deny access\r\n    if(settings.log && settings.logLevel !== 'allow') {\r\n      settings.logF('Access denied to IP address: ' + ip);\r\n    }\r\n\r\n    return error(ip, next);\r\n  };\r\n};\r\n"]}